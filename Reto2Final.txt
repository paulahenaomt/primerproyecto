import java.util.HashMap;
import java.util.Scanner;
/*
* Recomendaciones Generales:
*
*    -> El método run() funcionará como nuestro método principal
*    -> No declarar objetos de tipo Scanner, utilizar el método read() para solicitar datos al usuario.
*    -> Si requiere utilizar varias clases, estas NO deben ser tipo public.
*/
class Reto2{

    /**
    *  Este debe ser el único objeto de tipo Scanner en el código
    */
    private final Scanner scanner = new Scanner(System.in);

    /**
    * Este método es usado para solicitar datos al usuario
    * @return  Lectura de la siguiente linea del teclado
    */
    public String read(){
        return this.scanner.nextLine();
    }

    /**
    * método principal
    */
    public void run(){
        BaseDatosProductos bdp = new BaseDatosProductos();
        String operacion = read();
        String arregloProducto[] = read().split(" ");
        Producto producto = new Producto(Integer.parseInt(arregloProducto[0]),
                arregloProducto[1],
                Double.parseDouble(arregloProducto[2]),
                Integer.parseInt(arregloProducto[3]));
        switch(operacion){
            case "AGREGAR":
                System.out.println(bdp.agregarProducto(producto));
                break;
            case "BORRAR":
                System.out.println(bdp.eliminarProducto(producto));
                break;
            case "ACTUALIZAR":
                System.out.println(bdp.actualizarProducto(producto));
                break;         
        }
    }
}

class Producto {

    private int codigo;
    private String nombre;
    private double precio;
    private int inventario;

    public int getCodigo() {
        return codigo;
    }

    public void setCodigo(int codigo) {
        this.codigo = codigo;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public double getPrecio() {
        return precio;
    }

    public void setPrecio(double precio) {
        this.precio = precio;
    }

    public int getInventario() {
        return inventario;
    }

    public void setInventario(int inventario) {
        this.inventario = inventario;
    }

    public Producto(int codigo, String nombre, double precio, int inventario) {
        this.codigo = codigo;
        this.nombre = nombre;
        this.precio = precio;
        this.inventario = inventario;
    }
}
class BaseDatosProductos {
    
    HashMap<Integer,Producto> listaProductos = new HashMap<>();
     
    public BaseDatosProductos(){
        listaProductos.put(1, new Producto(1, "Manzanas", 5000.0, 25));
        listaProductos.put(2, new Producto(2, "Limones", 2300.0, 15));
        listaProductos.put(3, new Producto(3, "Peras", 2700.0, 33));
        listaProductos.put(4, new Producto(4, "Arandanos", 9300.0, 5));
        listaProductos.put(5, new Producto(5, "Tomates", 2100.0, 42));
        listaProductos.put(6, new Producto(6, "Fresas", 4100.0, 3));
        listaProductos.put(7, new Producto(7, "Helado", 4500.0, 41));
        listaProductos.put(8, new Producto(8, "Galletas", 500.0, 8));
        listaProductos.put(9, new Producto(9, "Chocolates", 3500.0, 80));
        listaProductos.put(10,new Producto(10, "Jamon", 15000.0, 10));

    }
    public String agregarProducto(Producto producto) {
        if (verificarExistencia(producto)){
           return "ERROR";    
        }else{ 
           listaProductos.put(producto.getCodigo(), producto);
        return generarInforme() + "";
        }
    }
    public String eliminarProducto(Producto producto){
        if (verificarExistencia(producto)){
            listaProductos.remove(producto.getCodigo());
            return generarInforme()+"";
        }else{
           return "ERROR";
        }
    }
    public String actualizarProducto(Producto producto){
        if (verificarExistencia(producto)){
            listaProductos.replace(producto.getCodigo(), producto);
            return generarInforme()+"";
        }else{
           return "ERROR";
       }
    }
    public boolean verificarExistencia(Producto producto) {
        return listaProductos.containsKey(producto.getCodigo());
    } 
    public double generarInforme(){
       double suma = 0;
       for (Producto producto: listaProductos.values()){
        suma += producto.getPrecio() * producto.getInventario();
       }
       return suma;
    }
}
    

